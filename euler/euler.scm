;; -*- geiser-scheme-implementation: guile -*-

(use-modules
 (srfi srfi-1)     ; list library
 (srfi srfi-26)    ; cut
 (srfi srfi-41)    ; streams, i.e. lazy lists
 (srfi srfi-43))   ; vector library

(define (euler01)
  "If we list all the natural numbers below 10 that are multiples of 3 or 5, we
get 3, 5, 6, and 9.  The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000."
  (do ((sum 0)
       (n   1 (+ n 1)))
      ((>= n 1000) sum)
    (if (or (divisible? n 3)
            (divisible? n 5))
        (set! sum (+ sum n)))))

(define (divisible? n m)
  (= 0 (remainder n m)))

(define (euler02)
  "Each new term in the Fibonacci sequence is generated by adding the previous
two terms.  By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms."
  (do ((sum 0)
       (a 1 b)
       (b 1 (+ a b)))
      ((>= a 4000000) sum)
    (if (even? a)
        (set! sum (+ sum a)))))

(define (even? n)
  (divisible? n 2))

(define (odd? n)
  (not (even? n)))

(define (euler03)
  "The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?"
  (apply max (factor 600851475143)))

(define (factor n)
  (cond ((= n 0) (list 0))
        ((< n 0) (cons -1 (factor (- n))))
        (else
         (let ((next (prime-candidates)))
           (do ((factors '())
                (m (next) (next)))
               ((<= n 1) (reverse factors))
             (when (> (* m m) n)
               (set! factors (cons n factors))
               (set! n 1))
             (while (divisible? n m)
               (set! factors (cons m factors))
               (set! n (/ n m))))))))

(define (prime? n)
  (cond ((< n 2) #f)
        (else
         (= 1 (length (factor n))))))

(define primes
  ;; Every prime >3 is a multiple of 6, plus or minus 1
  (let ((candidates (stream-append
                     (stream 2 3)
                     (stream-concat
                      (stream-of (stream (- x 1) (+ x 1))
                                 (x in (stream-from 6 6)))))))
    (define (filter-prime stream)
      (stream-cons (stream-car stream)
                   (filter-prime (stream-filter
                                  (compose not (cut divisible? <> (stream-car stream)))
                                  (stream-cdr stream)))))
    (filter-prime candidates)))

(define primes
  (stream-filter prime? (stream-from 2)))

(define (prime-candidates)
  (let ((n 2)
        (addends (list 2 4)))
    (set-cdr! (cdr addends) addends)
    (set! addends (cons* 0 1 2 addends))
    (lambda ()
      (set! n (+ n (car addends)))
      (set! addends (cdr addends))
      n)))


(define (euler04)
  "A palindromic number reads the same both ways.  The largest palindrome made
from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers."
  (stream-fold
   max
   0
   (stream-filter (compose palindrome? number->string)
                  (stream-of (* x y)
                             (x in (stream-range 100 1000))
                             (y in (stream-range 100 1000))
                             (>= x y)))))

(define (palindrome? s)
  (string=? s (string-reverse s)))

(define (euler05)
  "2520 is the smallest number that can be divided by each of the numbers from
1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the
numbers from 1 to 20?"
  (do ((i 0 (+ i 1))
       (factors (vector-unfold 1+ 20))
       (product 1))
      ((>= i 20) product)
    (let ((factor (vector-ref factors i)))
      (set! product (* product factor))
      (vector-map! (lambda (_ elem) (if (divisible? elem factor)
                                        (/ elem factor)
                                        elem))
                   factors))))

(define (euler06)
  "The sum of the squares of the first ten natural numbers is,
    1² + 2² + ... + 10² = 385

The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10)² = 55² = 3025

Hence the difference between the sum of the squares of the first ten natural
numbers and the square of the sum is 3025 - 385 = 2640.

Find the difference between the sum of the squares of the first one hundred
natural numbers and the square of the sum."
  (let* ((nats (iota 100 1))
         (sum-of-squares (sum (map square nats)))
         (square-of-sum  (square (sum nats))))
    (- square-of-sum
       sum-of-squares)))

(define (square x)
  (* x x))

(define (sum lst)
  (apply + lst))

(define (euler07)
  "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
that the 6th prime is 13.

What is the 10,001st prime number?"
  (nth-prime 10001))

(define (nth-prime n)
  (stream-ref primes (- n 1)))
